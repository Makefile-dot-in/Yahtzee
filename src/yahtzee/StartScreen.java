/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yahtzee;

import java.awt.Component;
import java.awt.EventQueue;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.DefaultSingleSelectionModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import yahtzee.NetworkClient.ClientHandler;
import yahtzee.NetworkProtocol.NetworkException;
import yahtzee.NetworkServer.LogType;
import yahtzee.NetworkServer.ServerHandler;

/**
 *
 * @author user
 */
public class StartScreen extends JTabbedPane {
    private final int MAX_PLAYERS = 6;
    /**
     * Creates new form StartScreen
     */
    public StartScreen() {
        initComponents();
        
        playerNameFields = new JTextField[MAX_PLAYERS];
        for (int i = 0; i < MAX_PLAYERS; i++) {
            JTextField field = new JTextField();
            playerNamePanel.add(field);
            playerNameFields[i] = field;
        }
    }

    private String[] getPlayerNames() {
        return Arrays.stream(playerNameFields)
                .map(f -> f.getText().trim())
                .filter(s -> s.length() > 0)
                .toArray(String[]::new);
    }
    
    private static class LogItem {
        String message;
        final Instant time = Instant.now();
        LogType level;
    }
    
    private static class LogItemRenderer extends JLabel implements ListCellRenderer<LogItem> {
        private static final String[] icons = {
            "OptionPane.errorIcon", 
            "OptionPane.informationIcon",
            "OptionPane.warningIcon"
        };
        public LogItemRenderer() {
            setOpaque(true);
        }
        
        @Override
        public Component getListCellRendererComponent(JList<? extends LogItem> jlist, 
                                                      LogItem item, 
                                                      int idx, 
                                                      boolean selected, 
                                                      boolean bln1) {
            setIcon(UIManager.getIcon(icons[item.level.ordinal()]));
            DateTimeFormatter fmt = DateTimeFormatter
                    .ofLocalizedDateTime(FormatStyle.MEDIUM)
                    .withZone(ZoneId.systemDefault());
            
            if (selected) {
                setForeground(jlist.getSelectionForeground());
                setBackground(jlist.getSelectionBackground());
            } else {
                setForeground(jlist.getForeground());
                setBackground(jlist.getBackground());
            }
            
            String text = String.format("[%s] %s", fmt.format(item.time), item.message);
            setText(text);
            return this;
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localSetup = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        playerNamePanel = new javax.swing.JPanel();
        startLocal = new javax.swing.JButton();
        networkSetup = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        joinAddress = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        joinPort = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        playerName = new javax.swing.JTextField();
        joinProgressBar = new javax.swing.JProgressBar();
        connect = new javax.swing.JButton();
        serverSetup = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        serverAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        serverPort = new javax.swing.JSpinner();
        removeItem = new javax.swing.JButton();
        playerPane = new javax.swing.JScrollPane();
        playerList = new javax.swing.JList<>();
        logScrollPane = new javax.swing.JScrollPane();
        logList = new javax.swing.JList<>();
        statusIndicator1 = new yahtzee.StatusIndicator();
        connectedString = new java.awt.Label();
        startStop = new javax.swing.JButton();
        startStopGame = new javax.swing.JButton();

        jLabel1.setText("Players:");

        playerNamePanel.setLayout(new java.awt.GridLayout(6, 0));

        startLocal.setText("Start Game");
        startLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startLocalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout localSetupLayout = new javax.swing.GroupLayout(localSetup);
        localSetup.setLayout(localSetupLayout);
        localSetupLayout.setHorizontalGroup(
            localSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(localSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(localSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(204, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, localSetupLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startLocal)
                .addContainerGap())
        );
        localSetupLayout.setVerticalGroup(
            localSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(localSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                .addComponent(startLocal)
                .addContainerGap())
        );

        addTab("Local Game", localSetup);

        jLabel2.setText("Address:");

        jLabel4.setText("Port:");

        joinPort.setModel(new javax.swing.SpinnerNumberModel(32543, 1, 65535, 1));
        joinPort.setEditor(new javax.swing.JSpinner.NumberEditor(joinPort, "#"));

        jLabel5.setText("Player name:");

        joinProgressBar.setString("");
        joinProgressBar.setStringPainted(true);

        connect.setLabel("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout networkSetupLayout = new javax.swing.GroupLayout(networkSetup);
        networkSetup.setLayout(networkSetupLayout);
        networkSetupLayout.setHorizontalGroup(
            networkSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(networkSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(joinProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(networkSetupLayout.createSequentialGroup()
                        .addGroup(networkSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(networkSetupLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(joinAddress))
                            .addGroup(networkSetupLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerName, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(joinPort, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, networkSetupLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(connect)))
                .addContainerGap())
        );
        networkSetupLayout.setVerticalGroup(
            networkSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(networkSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(joinAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(joinPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(networkSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(playerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, Short.MAX_VALUE)
                .addComponent(joinProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(connect)
                .addGap(14, 14, 14))
        );

        addTab("Join Network Game", networkSetup);

        jLabel3.setText("Address:");

        jLabel6.setText("Port:");

        serverPort.setModel(new javax.swing.SpinnerNumberModel(32543, 32543, 65535, 1));
        serverPort.setEditor(new javax.swing.JSpinner.NumberEditor(serverPort, "#"));

        removeItem.setText("-");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });

        playerList.setModel(new DefaultListModel<>());
        playerPane.setViewportView(playerList);

        logList.setModel(new javax.swing.DefaultListModel<LogItem>());
        logList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        logList.setCellRenderer(new LogItemRenderer());
        logScrollPane.setViewportView(logList);

        javax.swing.GroupLayout statusIndicator1Layout = new javax.swing.GroupLayout(statusIndicator1);
        statusIndicator1.setLayout(statusIndicator1Layout);
        statusIndicator1Layout.setHorizontalGroup(
            statusIndicator1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
        statusIndicator1Layout.setVerticalGroup(
            statusIndicator1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        connectedString.setText("Offline");

        startStop.setText("Start Server");
        startStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopActionPerformed(evt);
            }
        });

        startStopGame.setText("Start Game");
        startStopGame.setEnabled(false);
        startStopGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout serverSetupLayout = new javax.swing.GroupLayout(serverSetup);
        serverSetup.setLayout(serverSetupLayout);
        serverSetupLayout.setHorizontalGroup(
            serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverSetupLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(serverSetupLayout.createSequentialGroup()
                        .addGroup(serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(serverSetupLayout.createSequentialGroup()
                                .addComponent(statusIndicator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectedString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(removeItem)
                            .addComponent(playerPane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(serverSetupLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(startStopGame)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startStop))
                            .addComponent(logScrollPane))))
                .addContainerGap())
        );
        serverSetupLayout.setVerticalGroup(
            serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(serverAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addGroup(serverSetupLayout.createSequentialGroup()
                        .addGroup(serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectedString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusIndicator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerPane)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(serverSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeItem)
                    .addComponent(startStop)
                    .addComponent(startStopGame))
                .addContainerGap())
        );

        addTab("Start Network Game", serverSetup);
    }// </editor-fold>//GEN-END:initComponents

    private void startLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startLocalActionPerformed
        // TODO add your handling code here:
        GameController ctrl = new LocalController(getPlayerNames());
        callback.setController(ctrl);
    }//GEN-LAST:event_startLocalActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        // TODO add your handling code here:
        NetworkClient c = new NetworkClient(playerName.getText(), 
                                            joinAddress.getText(), 
                                            (Integer)joinPort.getValue());
        joinProgressBar.setString("Connecting");
        joinProgressBar.setIndeterminate(true);
        c.setHandler(new ClientHandler() {
            @Override
            public void onConnect() {
                EventQueue.invokeLater(() -> joinProgressBar.setString("Waiting for the game to start"));
            }

            @Override
            public void onDisconnect() {
                EventQueue.invokeLater(() -> {
                   joinProgressBar.setString("");
                   joinProgressBar.setIndeterminate(false);
                });
            }
            
            @Override
            public void onConnectFailed() {
                onDisconnect();
            }
            
        });
        callback.setController(c);
    }//GEN-LAST:event_connectActionPerformed

    private void startStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopActionPerformed
        // TODO add your handling code here:
        if (server == null) startServer(); else stopServer();
    }//GEN-LAST:event_startStopActionPerformed

    private void startStopGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopGameActionPerformed
        // TODO add your handling code here:
        server.beginNetworkGame();
    }//GEN-LAST:event_startStopGameActionPerformed

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        // TODO add your handling code here:
        server.kickPlayer(playerList.getSelectedIndex());
    }//GEN-LAST:event_removeItemActionPerformed

    private void startServer() {
        String host = serverAddress.getText();
        int port = (Integer)serverPort.getValue();
        try {
            server = new NetworkServer(InetAddress.getByName(host), port, 
                    new ServerHandler() {
                @Override
                public GameController cons(String[] playerNames) {
                    return new LocalController(playerNames);
                }

                @Override
                public void log(LogType l, String msg) {
                    serverLog(l, msg);
                }

                @Override
                public void onNewMember(String name) {
                    EventQueue.invokeLater(() -> {
                        DefaultListModel<String> m = (DefaultListModel<String>)(playerList.getModel());
                        m.addElement(name);                        
                    });
                }

                @Override
                public void onGameStart() {
                    EventQueue.invokeLater(() -> {
                        statusIndicator1.setColor(StatusIndicator.ONLINE);
                        connectedString.setText("Playing");
                        startStopGame.setEnabled(false);
                    });

                    serverLog(LogType.INFO, "Game started.");
                }

                @Override
                public void onMemberNameChange(int idx, String newname) {
                    EventQueue.invokeLater(() -> {
                        DefaultListModel<String> m = (DefaultListModel)playerList.getModel();
                        m.set(idx, newname);
                    });
                }
                
                @Override
                public void onMemberDisconnect(int idx) {
                    EventQueue.invokeLater(() -> {
                        DefaultListModel<String> m = (DefaultListModel)playerList.getModel();
                        m.remove(idx);
                    });
                }

                @Override
                public void onGameEnd() {
                    EventQueue.invokeLater(() -> {
                        statusIndicator1.setColor(StatusIndicator.LOBBY);
                        connectedString.setText("Lobby");
                        startStopGame.setEnabled(true);
                    });
                }


                
                
                
            });
        } catch (IOException | NetworkException ex) {
            serverLog(LogType.ERROR, ex.getMessage());
            EventQueue.invokeLater(this::stopServer);
            return;
        }
        startStopGame.setEnabled(true);
        startStop.setText("Stop Server");
        statusIndicator1.setColor(StatusIndicator.LOBBY);
        connectedString.setText("Lobby");
    }
    
    private void serverLog(LogType l, String msg) {
        LogItem i = new LogItem();
        i.level = l;
        i.message = msg;
        EventQueue.invokeLater(() -> {
            DefaultListModel<LogItem> m = (DefaultListModel<LogItem>)logList.getModel();
            m.addElement(i);    
        });        
    }
    
    private void stopServer() {
        if (server == null) return;
        startStop.setText("Start Server");
        startStopGame.setText("Start Game");
        startStopGame.setEnabled(false);
        statusIndicator1.setColor(StatusIndicator.OFFLINE);
        connectedString.setText("Offline");
        DefaultListModel<String> m = (DefaultListModel)playerList.getModel();
        m.removeAllElements();
        server.destroy();
        server = null;
    }
    
    public static interface SetCtrlCallback {
        public void setController(GameController ctrl);
    }
    
    public void setCallback(SetCtrlCallback cb) {
        callback = cb;
    }
    
    private NetworkServer server = null;
    private final JTextField[] playerNameFields;
    private SetCtrlCallback callback;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connect;
    private java.awt.Label connectedString;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField joinAddress;
    private javax.swing.JSpinner joinPort;
    private javax.swing.JProgressBar joinProgressBar;
    private javax.swing.JPanel localSetup;
    private javax.swing.JList<LogItem> logList;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JPanel networkSetup;
    private javax.swing.JList<String> playerList;
    private javax.swing.JTextField playerName;
    private javax.swing.JPanel playerNamePanel;
    private javax.swing.JScrollPane playerPane;
    private javax.swing.JButton removeItem;
    private javax.swing.JTextField serverAddress;
    private javax.swing.JSpinner serverPort;
    private javax.swing.JPanel serverSetup;
    private javax.swing.JButton startLocal;
    private javax.swing.JButton startStop;
    private javax.swing.JButton startStopGame;
    private yahtzee.StatusIndicator statusIndicator1;
    // End of variables declaration//GEN-END:variables
}
